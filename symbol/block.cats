import "entity.cats"

using ProofGamma = binary_fixed(32)
using ProofVerificationHash = binary_fixed(16)
using ProofScalar = binary_fixed(32)

# enumeration of block types
enum BlockType : uint16
	# nemesis block
	NEMESIS = 0x8043

	# normal block
	NORMAL = 0x8143

	# importance block
	IMPORTANCE = 0x8243

# verfiable random function proof
struct VrfProof
	# gamma
	gamma = ProofGamma

	# verification hash
	verification_hash = ProofVerificationHash

	# scalar
	scalar = ProofScalar

# binary layout for a block header
struct BlockHeader
	inline SizePrefixedEntity
	inline VerifiableEntity
	inline EntityBody

	# block type
	type = BlockType

	# block height
	height = Height

	# number of milliseconds elapsed since creation of nemesis block
	timestamp = Timestamp

	# block difficulty
	difficulty = Difficulty

	# generation hash proof
	generation_hash_proof = VrfProof

	# previous block hash
	previous_block_hash = Hash256

	# hash of the transactions in this block
	transactions_hash = Hash256

	# hash of the receipts generated by this block
	receipts_hash = Hash256

	# hash of the global chain state at this block
	state_hash = Hash256

	# beneficiary address designated by harvester
	beneficiary_address = Address

	# fee multiplier applied to block transactions
	fee_multiplier = BlockFeeMultiplier

# binary layout for an importance block footer
struct ImportanceBlockFooter
	# number of voting eligible accounts
	voting_eligible_accounts_count = uint32

	# number of harvesting eligible accounts
	harvesting_eligible_accounts_count = uint64

	# total balance eligible for voting
	total_voting_balance = Amount

	# previous importance block hash
	previous_importance_block_hash = Hash256

# binary layout for a nemesis block header
struct NemesisBlockHeader
	BLOCK_VERSION = make_const(uint8, 1)
	BLOCK_TYPE = make_const(BlockType, NEMESIS)

	inline BlockHeader
	inline ImportanceBlockFooter

# binary layout for a normal block header
struct NormalBlockHeader
	BLOCK_VERSION = make_const(uint8, 1)
	BLOCK_TYPE = make_const(BlockType, NORMAL)

	inline BlockHeader

	# reserved padding to align end of BlockHeader on 8-byte boundary
	block_header_reserved_1 = make_reserved(uint32, 0)

# binary layout for an importance block header
struct ImportanceBlockHeader
	BLOCK_VERSION = make_const(uint8, 1)
	BLOCK_TYPE = make_const(BlockType, IMPORTANCE)

	inline BlockHeader
	inline ImportanceBlockFooter
